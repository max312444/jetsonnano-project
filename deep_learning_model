import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
import cv2
import os
import numpy as np

# 데이터셋 클래스 정의
class LineDataset(Dataset):
    def __init__(self, image_dir, label_file, transform=None):
        self.image_dir = image_dir
        self.transform = transform
        self.data = []

        # 레이블 파일 읽기
        with open(label_file, "r") as f:
            for line in f.readlines()[1:]:  # 헤더 건너뛰기
                image_path, center_x, center_y = line.strip().split(",")
                self.data.append((image_path, float(center_x), float(center_y)))

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        image_path, center_x, center_y = self.data[idx]
        image = cv2.imread(os.path.join(self.image_dir, image_path))
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = cv2.resize(image, (224, 224))

        if self.transform:
            image = self.transform(image)

        # 이미지 정규화
        image = image / 255.0  # [0, 1] 스케일로 정규화
        image = torch.tensor(image, dtype=torch.float32).permute(2, 0, 1)  # (H, W, C) → (C, H, W)

        # 라벨
        label = torch.tensor([center_x, center_y], dtype=torch.float32)
        return image, label

# 모델 정의
class EndToEndModel(nn.Module):
    def __init__(self):
        super(EndToEndModel, self).__init__()
        # CNN 기반 특징 추출
        self.cnn = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2),  # 224 → 112
            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2),  # 112 → 56
            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2)  # 56 → 28
        )

        # Fully Connected Network
        self.fc = nn.Sequential(
            nn.Flatten(),
            nn.Linear(128 * 28 * 28, 512),
            nn.ReLU(),
            nn.Linear(512, 128),
            nn.ReLU(),
            nn.Linear(128, 2)  # (center_x, center_y)
        )

    def forward(self, x):
        x = self.cnn(x)
        x = self.fc(x)
        return x

# 학습 루프 정의
def train_model(model, dataloader, criterion, optimizer, device, epochs=10):
    model = model.to(device)
    for epoch in range(epochs):
        model.train()
        total_loss = 0

        for images, labels in dataloader:
            images, labels = images.to(device), labels.to(device)

            # Forward pass
            outputs = model(images)
            loss = criterion(outputs, labels)

            # Backward pass
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            total_loss += loss.item()

        print(f"Epoch [{epoch + 1}/{epochs}], Loss: {total_loss / len(dataloader):.4f}")

# 예측 함수 정의
def predict_image(model, image_path, device):
    model.eval()
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = cv2.resize(image, (224, 224)) / 255.0
    image = torch.tensor(image, dtype=torch.float32).permute(2, 0, 1).unsqueeze(0).to(device)

    with torch.no_grad():
        prediction = model(image)
    return prediction.cpu().numpy()

# 데이터 경로 및 설정
image_dir = "C:/Angle45"
label_file = os.path.join(image_dir, "labels.csv")

# 데이터셋 및 DataLoader
dataset = LineDataset(image_dir, label_file)
dataloader = DataLoader(dataset, batch_size=16, shuffle=True)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# 모델, 손실 함수, 옵티마이저 초기화
model = EndToEndModel()
criterion = nn.MSELoss()  # 좌표 예측이므로 MSE 사용
optimizer = optim.Adam(model.parameters(), lr=0.001)

# 모델 학습
train_model(model, dataloader, criterion, optimizer, device, epochs=10)

# 모델 저장
torch.save(model.state_dict(), "end_to_end_model.pth")

# 예측 테스트
test_image_path = "C:/jetsonImage/45/test.jpg"
model.load_state_dict(torch.load("end_to_end_model.pth"))
prediction = predict_image(model, test_image_path, device)
print(f"Predicted coordinates: {prediction}")
